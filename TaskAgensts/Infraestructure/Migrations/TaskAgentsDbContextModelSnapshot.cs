// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskAgents.Infraestructure.Data;

#nullable disable

namespace TaskAgents.Infraestructure.Migrations
{
    [DbContext(typeof(TaskAgentsDbContext))]
    partial class TaskAgentsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("TaskAgents.Core.Entities.ActivityTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameActivity")
                        .HasColumnType("TEXT");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("TaskAgents.Core.Entities.TaskApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ActivityTaskId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentFullName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeTask")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TypeTaskId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTaskId");

                    b.HasIndex("TypeTaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskAgents.Core.Entities.TypeTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeTaskName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypeTasks");
                });

            modelBuilder.Entity("TaskAgents.Core.Entities.TaskApplication", b =>
                {
                    b.HasOne("TaskAgents.Core.Entities.ActivityTask", "ActivityTask")
                        .WithMany()
                        .HasForeignKey("ActivityTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskAgents.Core.Entities.TypeTask", "TypeTask")
                        .WithMany()
                        .HasForeignKey("TypeTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityTask");

                    b.Navigation("TypeTask");
                });
#pragma warning restore 612, 618
        }
    }
}
